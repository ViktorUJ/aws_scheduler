apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: scheduler
  name: scheduler
spec:
  replicas: 1
  selector:
    matchLabels:
      app: scheduler
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: scheduler
        spotinst.io/node-lifecycle: od
        spotinst.io/restrict-scale-down: "true"
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: spotinst.io/node-lifecycle
                operator: In
                values:
                - od
      containers:
      - image: "{{ $.Values.image.repository }}:{{ $.Values.image.tag }}"
        name: app
        resources:
          requests:
             cpu: 300m
             memory: 100Mi
        env:
         - name: DYNAMODB_REGION
           value: "{{ $.Values.DYNAMODB_REGION }}"
         - name: AWS_IAM_TYPE
           value: "{{ $.Values.AWS_IAM_TYPE}}"
         - name: AWS_KEY
           value: "{{ $.Values.AWS_KEY }}"
         - name: AWS_SECRET
           value: "{{ $.Values.AWS_SECRET }}"
         - name: DYNAMODB_TABLE_NAME
           value: "{{ $.Values.DYNAMODB_TABLE_NAME }}"
         - name: SLEEP_NEXT_RUN
           value: "{{ $.Values.SLEEP_NEXT_RUN }}"
         - name: SLEEP_NEXT_ITEM
           value: "{{ $.Values.SLEEP_NEXT_ITEM }}"
         - name: LOCK_TIMEOUT
           value: "{{ $.Values.LOCK_TIMEOUT }}"

      dnsPolicy: ClusterFirst
      imagePullSecrets:
        - name: docker